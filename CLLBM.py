# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SZl5xMLUJn1AssjvzRh4OEdyaWZ8zDYu
"""

import json
import os

class Book:
    def __init__(self, title, author, year, isbn, is_borrowed=False):
        self.title = title
        self.author = author
        self.year = year
        self.isbn = isbn
        self.is_borrowed = is_borrowed

    def borrow(self):
        if self.is_borrowed:
            print("Book is already borrowed.")
            return False
        self.is_borrowed = True
        return True

    def return_book(self):
        if not self.is_borrowed:
            print("Book is not borrowed.")
            return False
        self.is_borrowed = False
        return True

    def to_dict(self):
        return self.__dict__

    @staticmethod
    def from_dict(data):
        return Book(**data)

class LibraryManager:
    def __init__(self, filename='books.txt'):
        self.filename = filename
        self.books = []
        self.load_data()

    def add_book(self):
        title = input("Title: ")
        author = input("Author: ")
        try:
            year = int(input("Year: "))
        except ValueError:
            print("Invalid year, must be an integer.")
            return
        isbn = input("ISBN: ")
        new_book = Book(title, author, year, isbn)
        self.books.append(new_book)
        self.save_data()
        print("Book added.")

    def list_books(self):
        if not self.books:
            print("No books in the library.")
            return
        for i, book in enumerate(self.books, 1):
            status = "Borrowed" if book.is_borrowed else "Available"
            print(f"{i}. {book.title} by {book.author}, {book.year}, ISBN: {book.isbn} [{status}]")

    def search_books(self):
        option = input("Search by (title/author/year): ").strip().lower()
        keyword = input("Enter search keyword: ").strip()
        results = []
        for book in self.books:
            if option == 'title' and keyword.lower() in book.title.lower():
                results.append(book)
            elif option == 'author' and keyword.lower() in book.author.lower():
                results.append(book)
            elif option == 'year' and keyword == str(book.year):
                results.append(book)
        if not results:
            print("No matching books found.")
        else:
            for book in results:
                status = "Borrowed" if book.is_borrowed else "Available"
                print(f"{book.title} by {book.author}, {book.year}, ISBN: {book.isbn} [{status}]")

    def find_book_by_index(self):
        self.list_books()
        try:
            idx = int(input("Enter book number: ")) - 1
            if 0 <= idx < len(self.books):
                return self.books[idx]
        except ValueError:
            pass
        print("Invalid selection.")
        return None

    def borrow_book(self):
        print("Choose a book to borrow:")
        book = self.find_book_by_index()
        if book and not book.is_borrowed:
            book.borrow()
            self.save_data()
            print("Book borrowed.")
        elif book:
            print("Book is already borrowed.")

    def return_book(self):
        print("Choose a book to return:")
        book = self.find_book_by_index()
        if book and book.is_borrowed:
            book.return_book()
            self.save_data()
            print("Book returned.")
        elif book:
            print("Book is not currently borrowed.")

    def save_data(self):
        with open(self.filename, 'w') as f:
            json.dump([book.to_dict() for book in self.books], f, indent=2)

    def load_data(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as f:
                self.books = [Book.from_dict(b) for b in json.load(f)]

    def run_menu(self):
        while True:
            print("\n--- Library Manager ---")
            print("1. Add New Book")
            print("2. List All Books")
            print("3. Search for Books")
            print("4. Borrow a Book")
            print("5. Return a Book")
            print("6. Exit")
            choice = input("Choose an option: ").strip()
            if choice == '1':
                self.add_book()
            elif choice == '2':
                self.list_books()
            elif choice == '3':
                self.search_books()
            elif choice == '4':
                self.borrow_book()
            elif choice == '5':
                self.return_book()
            elif choice == '6':
                break
            else:
                print("Invalid option. Try again.")

if __name__ == "__main__":
    LibraryManager().run_menu()